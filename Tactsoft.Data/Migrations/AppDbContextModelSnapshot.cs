// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tactsoft.Service.DbDependencies;

#nullable disable

namespace Tactsoft.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Advance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("AdvanceDate")
                        .HasColumnType("Date");

                    b.Property<long?>("AdvanceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double>("ApproveAmount")
                        .HasColumnType("float");

                    b.Property<string>("ApproveBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DisburseMonth")
                        .HasColumnType("int");

                    b.Property<DateTime>("DisburseYear")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double>("MonthlyDeduction")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Advances");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvanceDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdvanceTypeId = 1L,
                            ApproveAmount = 10000.0,
                            ApproveBy = "Arif",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DisburseMonth = 0,
                            DisburseYear = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1L,
                            MonthlyDeduction = 2000.0
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AdvanceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdvanceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AdvanceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvanceTypeName = "Advance Salary",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AttachmentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AttachmentTyppeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTyppeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attachments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AttachmentFile = "avatar.png",
                            AttachmentTyppeId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EmployeeId = 1L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AttachmentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AttachmentsType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AttachmentTypeName = "NID",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            AttachmentTypeName = "Birth Certificate",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attandance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Present")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attandances");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BranchInfoId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyInfoId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("EntryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Intime")
                        .HasColumnType("Date");

                    b.Property<double>("IntimeNumber")
                        .HasColumnType("float");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("Date");

                    b.Property<double>("OutTimeNumber")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchInfoId");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchInfoId = 1L,
                            CompanyInfoId = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Date = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            EmployeeId = 1L,
                            EntryType = "Admin",
                            Intime = new DateTime(2023, 3, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IntimeNumber = 5.0,
                            OutTime = new DateTime(2023, 3, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OutTimeNumber = 5.0
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Award", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AwardTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Gift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Prize")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AwardTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Awards");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AwardTypeId = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Date = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1L,
                            Gift = "Madel",
                            Prize = 2.0
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AwardType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AwardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AwardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AwardTypeName = "Regualar Employee",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BloodGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BloodGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BloodGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BloodGroupName = "A+",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            BloodGroupName = "A-",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            BloodGroupName = "B+",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            BloodGroupName = "B-",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            BloodGroupName = "O+",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            BloodGroupName = "O-",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            BloodGroupName = "AB+",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            BloodGroupName = "AB-",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BranchInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BranceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyInfoId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ZipCodeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("BranchInfos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranceName = "Bashundhara Logistics Limited",
                            BranchAddress = "Pushpanjali,Bangladesh",
                            CityId = 1L,
                            CompanyInfoId = 1L,
                            ContactNumber = "+8800056254155",
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Email = "bashundharaLogistics@gmail.com",
                            StateId = 1L,
                            ZipCodeId = 1L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("StateId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityName = "Mohammadpur",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CityName = "Dhanmondi",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CityName = "Nator",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CityName = "Sirajganj",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CityName = "Hempstead town",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CityName = "South Bucks",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CityName = "Huntsville",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            CityName = "Montgomery",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateId = 4L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanyInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CityId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ZipCodeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("CompanyInfos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            CompanyAddress = "Dhaka Bangladesh",
                            CompanyName = "Bashundhara Group",
                            ContactNumber = "+88016325152",
                            CountryId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Email = "Bashundhara@gmail.com",
                            StateId = 1L,
                            ZipCodeId = 1L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryCode = "BD",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            CountryCode = "USA",
                            CountryName = "United States",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            CountryCode = "UK",
                            CountryName = "United Kingdom",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Deduction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeductionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Deductions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "4 Days Late",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DeductionName = "Late Absent"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DegreeName = "Msc"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DepartmentName = "IT"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Designation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DesignationName = "IT Officer"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DegreeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("EducationGroupId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("EducationGroupId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DegreeId = 1L,
                            EducationGroupId = 1L,
                            EmployeeId = 1L,
                            InstituteName = "Brac University",
                            PassingYear = "2023-09-08",
                            Remarks = "Good",
                            Result = "Frist Class"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EducationGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EducationGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EducationGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EducationGroupName = "Science"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BloodGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("BrancehId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GenderId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MaritialStatusId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationalaty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReligionId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("BrancehId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritialStatusId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrancehId = 1L,
                            CompanyId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DateOfBirth = new DateTime(1994, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hasan",
                            GenderId = 1L,
                            JoiningDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Khan",
                            MaritialStatusId = 1L,
                            MiddleName = "Ali",
                            NID = "345694565498",
                            Nationalaty = "Bangladeshi",
                            Password = "",
                            Picture = "avatar2.png",
                            ProjectId = 1L,
                            ReligionId = 1L,
                            UserName = ""
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmployeeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfParmanent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Fri")
                        .HasColumnType("bit");

                    b.Property<bool>("Mon")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sat")
                        .HasColumnType("bit");

                    b.Property<bool>("Sun")
                        .HasColumnType("bit");

                    b.Property<bool>("Thu")
                        .HasColumnType("bit");

                    b.Property<bool>("Tue")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Wed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DateOfParmanent = new DateTime(2023, 1, 2, 0, 3, 0, 0, DateTimeKind.Unspecified),
                            Fri = false,
                            Mon = false,
                            Remarks = "Good",
                            Sat = false,
                            Sun = false,
                            Thu = false,
                            Tue = false,
                            Wed = false
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmploymentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JobFor")
                        .HasColumnType("Date");

                    b.Property<DateTime>("JobTo")
                        .HasColumnType("Date");

                    b.Property<string>("NameOfCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForLeaving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentHistories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EmployeeId = 1L,
                            JobFor = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobTo = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameOfCompany = "Us Bangla",
                            ReasonForLeaving = "abcd",
                            Salary = 85000.0
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.FamilyMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyMemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RelationShipId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationShipId");

                    b.ToTable("FamilyMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Uttara Dhaka 1230",
                            ContactNumber = "+88078827371",
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EmployeeId = 1L,
                            FamilyMemberName = "Kamal",
                            RelationShipId = 1L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            GenderName = "Female"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            GenderName = "Others"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LeaveApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AttachmentFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LeaveTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveApplications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AttachmentFile = "uhyg",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Description = "this is descriptin",
                            EmployeeId = 1L,
                            EndDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveTypeId = 1L,
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "abcd"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LeaveType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LeaveTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            LeaveTypeName = "Sick"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.MaritialStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaritialStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("MaritialStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            MaritialStatusName = "Married"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            MaritialStatusName = "UnMarried"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            MaritialStatusName = "Divorce"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Nominee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("NomineeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RelationShipId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("percentage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationShipId");

                    b.ToTable("Nominees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Mirpur",
                            ContactNumber = "018213256442",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EmployeeId = 1L,
                            NomineeName = "Kabir",
                            Picture = "zsdfasdf",
                            RelationShipId = 1L,
                            percentage = "100%"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BranchInfoId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyInfoId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Duraction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchInfoId");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchInfoId = 1L,
                            CompanyInfoId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Duraction = "1.9 Month",
                            EndDate = new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified),
                            ProjectDescription = "Create a beautiful building",
                            ProjectName = "Construction",
                            StartDate = new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Reference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Nid")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("References");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Mirpur",
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            MobileNumber = "023256589522",
                            Nid = 56588552685.0,
                            Phone = "01213256442",
                            ReferenceName = "Kamal"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.RelationShip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RelationShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Relationships");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            RelationShipName = "Brother"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReligionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Religions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReligionName = "Muslim"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReligionName = "hindu"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReligionName = "Christan"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ReligionName = "Buddhism"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceInfoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServiceInfos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DepartmentId = 1L,
                            DesignationId = 1L,
                            EmployeeId = 1L,
                            JoiningDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Remarks = "Good"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepertmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("DesignationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DepertmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ServiceInformations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            DateOfJoining = new DateTime(2023, 1, 2, 0, 3, 0, 0, DateTimeKind.Unspecified),
                            DepertmentId = 1L,
                            DesignationId = 1L,
                            EmployeeId = 1L
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CountryID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryID = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateName = "Dhaka"
                        },
                        new
                        {
                            Id = 2L,
                            CountryID = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateName = "Rajshahi"
                        },
                        new
                        {
                            Id = 3L,
                            CountryID = 2L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateName = "New York"
                        },
                        new
                        {
                            Id = 4L,
                            CountryID = 3L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            StateName = "London"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Training", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganigationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            EmployeeId = 1L,
                            EndDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrganigationName = "Tactsoft",
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingName = "Raju"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ZipCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CityId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ZipCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("ZipCodes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "1207/1225"
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 2L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "1209"
                        },
                        new
                        {
                            Id = 3L,
                            CityId = 3L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "6400-03"
                        },
                        new
                        {
                            Id = 4L,
                            CityId = 4L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "6700-02"
                        },
                        new
                        {
                            Id = 5L,
                            CityId = 5L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "19549-11551"
                        },
                        new
                        {
                            Id = 6L,
                            CityId = 6L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "UB8,UB9"
                        },
                        new
                        {
                            Id = 7L,
                            CityId = 7L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "35649"
                        },
                        new
                        {
                            Id = 8L,
                            CityId = 8L,
                            CreatedBy = 1L,
                            CreatedDateUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            ZipCodeName = "36043"
                        });
                });

            modelBuilder.Entity("Tactsoft.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tactsoft.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Advance", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.AdvanceType", "AdvanceType")
                        .WithMany("Advances")
                        .HasForeignKey("AdvanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Advances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvanceType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attachment", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTyppeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Attachments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttachmentType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attandance", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Attandances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attendance", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.BranchInfo", "BranchInfo")
                        .WithMany("Attendances")
                        .HasForeignKey("BranchInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.CompanyInfo", "CompanyInfo")
                        .WithMany("Attendances")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchInfo");

                    b.Navigation("CompanyInfo");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Award", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.AwardType", "AwardType")
                        .WithMany("Awards")
                        .HasForeignKey("AwardTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Awards")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwardType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BranchInfo", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.City", "City")
                        .WithMany("BranchInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.CompanyInfo", "CompanyInfo")
                        .WithMany("BranchInfos")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("BranchInfos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.State", "State")
                        .WithMany("BranchInfos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ZipCode", "ZipCode")
                        .WithMany("BranchInfos")
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CompanyInfo");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.City", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanyInfo", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.City", "City")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.State", "State")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.ZipCode", "ZipCode")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.State", null)
                        .WithMany("Countries")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Education", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Degree", "Degree")
                        .WithMany("Educations")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.EducationGroup", "EducationGroup")
                        .WithMany("Educations")
                        .HasForeignKey("EducationGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("EducationGroup");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Employee", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.BloodGroup", null)
                        .WithMany("Employees")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.BranchInfo", "BranchInfo")
                        .WithMany("Employees")
                        .HasForeignKey("BrancehId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.City", null)
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.CompanyInfo", "CompanyInfo")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Country", null)
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.MaritialStatus", "MaritialStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MaritialStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Project", "project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Religion", "Religion")
                        .WithMany("Employees")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.State", null)
                        .WithMany("Employees")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BranchInfo");

                    b.Navigation("CompanyInfo");

                    b.Navigation("Gender");

                    b.Navigation("MaritialStatus");

                    b.Navigation("Religion");

                    b.Navigation("project");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EmploymentHistory", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Designation", "Designation")
                        .WithMany("EmploymentHistorys")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("EmploymentHistorys")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.FamilyMember", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.RelationShip", "RelationShip")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("RelationShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RelationShip");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LeaveApplication", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Attachment", null)
                        .WithMany("LeaveApplications")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.AttachmentType", null)
                        .WithMany("LeaveApplications")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Nominee", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Nominees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.RelationShip", "RelationShip")
                        .WithMany("Nominees")
                        .HasForeignKey("RelationShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RelationShip");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Project", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.BranchInfo", "BranchInfo")
                        .WithMany("Projects")
                        .HasForeignKey("BranchInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.CompanyInfo", "CompanyInfo")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Project", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BranchInfo");

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceInfo", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.BranchInfo", "BranchInfo")
                        .WithMany("ServiceInfos")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Department", "Department")
                        .WithMany("ServiceInfos")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Designation", "Designation")
                        .WithMany("ServiceInfos")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("ServiceInfos")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BranchInfo");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ServiceInformation", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Department", "Department")
                        .WithMany("ServiceInformations")
                        .HasForeignKey("DepertmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Designation", "Designation")
                        .WithMany("ServiceInformations")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("ServiceInformations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.State", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Training", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.Employee", "Employee")
                        .WithMany("Trainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ZipCode", b =>
                {
                    b.HasOne("Tactsoft.Core.Entities.City", "City")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AdvanceType", b =>
                {
                    b.Navigation("Advances");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Attachment", b =>
                {
                    b.Navigation("LeaveApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AttachmentType", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("LeaveApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.AwardType", b =>
                {
                    b.Navigation("Awards");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BloodGroup", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.BranchInfo", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Employees");

                    b.Navigation("Projects");

                    b.Navigation("ServiceInfos");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.City", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Employees");

                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.CompanyInfo", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("BranchInfos");

                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Country", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Employees");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Degree", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Department", b =>
                {
                    b.Navigation("ServiceInformations");

                    b.Navigation("ServiceInfos");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Designation", b =>
                {
                    b.Navigation("EmploymentHistorys");

                    b.Navigation("ServiceInformations");

                    b.Navigation("ServiceInfos");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.EducationGroup", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Employee", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Attachments");

                    b.Navigation("Attandances");

                    b.Navigation("Attendances");

                    b.Navigation("Awards");

                    b.Navigation("Educations");

                    b.Navigation("EmploymentHistorys");

                    b.Navigation("FamilyMembers");

                    b.Navigation("LeaveApplications");

                    b.Navigation("Nominees");

                    b.Navigation("ServiceInformations");

                    b.Navigation("ServiceInfos");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Gender", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.LeaveType", b =>
                {
                    b.Navigation("LeaveApplications");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.MaritialStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Project", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.RelationShip", b =>
                {
                    b.Navigation("FamilyMembers");

                    b.Navigation("Nominees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.Religion", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.State", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("Cities");

                    b.Navigation("CompanyInfos");

                    b.Navigation("Countries");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Tactsoft.Core.Entities.ZipCode", b =>
                {
                    b.Navigation("BranchInfos");

                    b.Navigation("CompanyInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
